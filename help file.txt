Control Unit
--		alu1_src <= 2'b00;
--		mem_read <= 1'b0;
--		mem_write <= 1'b0;
--		reg_write <= 1'b0;
--		alu1_op <= 2'b00;
--		branch <= 1'b0;
--		jump <= 1'b0;
--		load <= 1'b0;
--		jump_type <= 2'b00;
--		sig_multiple <= 1'b0;
--		t3_sel <= 1'b0;
--		reg_write_data_sel <= 2'b00;
--		reg_write_addr_sel <= 2'b00;








--------------------------------------------------------------------------------------------------------------------------
--		control_unit cu (
--					.t3_sel( t3_sel ),
--					.reg_src1( reg_src1 ),,
--					.mem_write_sig( mem_write_sig ),
--					.reg_write_sig( reg_write_sig ),
--					);

---------------------------------------------------------------------------------------------------------------------------------------------------
--		register_file reg_file (
--								.clk( clk ),
--								.rst( reset ),
--								.reg_write_en( reg_write_sp ),
--								.reg_read_addr_1( reg_addr1 ),		//rf_a1
--								.reg_read_data_1( T1 ),		//rf_d1
--								.reg_read_addr_2( reg_addr2 ),		//rf_a2 = IWR(8:6)
--								.reg_read_data_2( T2 ),		//rf_d2
--								.reg_write_dest( rfa3 ),		//rf_a3
--								.reg_write_data( rfd3 )			//rf_d3
--								);


------------------------------------------------------------------------------------------------------------------------------------------------------
entity InstructionMem is
	port( clk: in std_logic;
			PC :in std_logic_vector(15 downto 0);
			Instruction : out std_logic_vector(15 downto 0));
end InstructionMem;

architecture Fetch of InstructionMem is
	type ROM_add is array (100 to 0) of std_logic_vector(15 downto 0);
	signal ROM : ROM_add;
	
	function to_std_logic_vector(x: bit_vector) return std_logic_vector is
     alias lx: bit_vector(1 to x'length) is x;
     variable ret_val: std_logic_vector(1 to x'length);
   begin
     for I in 1 to x'length loop
        if(lx(I) = '1') then
          ret_val(I) := '1';
        else
          ret_val(I) := '0';
        end if;
     end loop; 
     return ret_val;
   end to_std_logic_vector;
begin

	process
	FILE Infile: text open read_mode is "InstruFile.txt";
	
	variable input_instruction : bit_vector (15 downto 0);	--for a single instruction
	variable Instr_Line: Line;
	variable Instr_Line_Count: integer :=0;
	
	begin
	while not endfile(Infile) loop
		
		readLine (Infile, Instr_Line);
			read (Instr_Line, input_instruction);
			ROM(Instr_Line_Count) <= to_std_logic_vector(input_instruction);
		
		Instr_Line_Count := Instr_Line_Count + 1;
	end loop;
	
	Instruction <= ROM(to_integer(unsigned(PC)));

		
	end process;
	
end Fetch;